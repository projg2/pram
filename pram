#!/usr/bin/env bash
# (c) 2019-2025 Michał Górny
# SPDX-License-Identifier: GPL-2.0-or-later

VERSION=11

die() {
	echo "${@}" >&2
	exit 1
}

print_usage() {
	echo "Usage: ${0} [<options>] <pr-number|pr-url|patch-url>"
}

print_help() {
	print_usage
	echo
	echo "Merge specified GitHub PR into the repository in current directory."
	echo
	echo "Options:"
	echo "  --am-options OPTIONS"
	echo "                   Pass additional OPTIONS to git am"
	echo "  -b BUG, --bug BUG"
	echo "  -c BUG, --closes BUG"
	echo "                   Reference or close the specific bug, takes either"
	echo "                   a bug number or URL, can be specified multiple times"
	echo "  -e EDITOR, --editor EDITOR"
	echo "                   Override the editor used (default: \${EDITOR})"
	echo "  --no-gitconfig   Do not query options via git config"
	echo "  -G, --no-gpgsign"
	echo "                   Do not automatically GPG-sign commits"
	echo "  -I, --non-interactive"
	echo "                   Do not interactively ask to merge, just do it"
	echo "  -r REPO, --repository REPO"
	echo "                   GitHub repo to use (default: gentoo/gentoo)"
	echo "  -s, --signoff    Add Signed-off-by to commits (the default)"
	echo "  -S, --no-signoff Disable adding Signed-off-by to commits"
	echo
	echo "Parameters:"
	echo "  <pr-number>      GitHub PR number"
	echo "  <pr-url>         Full URL to the pull request"
	echo "  <patch-url>      URL to a patch file"
	echo
	echo "Some options can be specified via 'git config' as well:"
	echo "  string options: pram.editor, pram.repo"
	echo "  boolean options: pram.gpgsign, pram.interactive, pram.signoff"
}

# add_trailer <file> <line-to-add>
add_trailer() {
	local file=${1}
	local line=${2}

	sed -i -e "1,/^---$/s@^---\$@${line}\n\0@" "${file}" ||
		die "Appending trailer via sed failed"
}

main() {
	# make sure files are sorted ascending
	local -x LC_COLLATE=C

	local am_options=()
	local bug=()
	local closes=()
	local editor=
	local pr=
	local repo=
	local signoff=def
	local interactive=def
	local gitconfig=1
	local gpgsign=def

	while [[ ${#} -gt 0 ]]; do
		case ${1} in
			-h|--help)
				print_help
				exit 0
				;;
			-V|--version)
				echo "pram ${VERSION}"
				exit 0
				;;

			--am-options)
				[[ ${#} -gt 1 ]] || die "${0}: missing argument to ${1}"
				am_options+=( "${2}" )
				shift
				;;
			--am-options=*)
				am_options+=( "${1#*=}" )
				;;
			-b|--bug)
				[[ ${#} -gt 1 ]] || die "${0}: missing argument to ${1}"
				bug+=( "${2}" )
				shift
				;;
			-b*)
				bug+=( "${1#-b}" )
				;;
			--bug=*)
				bug+=( "${1#*=}" )
				;;
			-c|--closes)
				[[ ${#} -gt 1 ]] || die "${0}: missing argument to ${1}"
				closes+=( "${2}" )
				shift
				;;
			-c*)
				closes+=( "${1#-c}" )
				;;
			--closes=*)
				closes+=( "${1#*=}" )
				;;
			-e|--editor)
				[[ ${#} -gt 1 ]] || die "${0}: missing argument to ${1}"
				editor=${2}
				shift
				;;
			-e*)
				editor=${1#-e}
				;;
			--editor=*)
				editor=${1#*=}
				;;
			--no-gitconfig)
				gitconfig=
				;;
			-G|--no-gpgsign)
				gpgsign=
				;;
			-I|--non-interactive)
				interactive=
				;;
			-r|--repository)
				[[ ${#} -gt 1 ]] || die "${0}: missing argument to ${1}"
				repo=${2}
				shift
				;;
			-r*)
				repo=${1#-r}
				;;
			--repository=*)
				repo=${1#*=}
				;;
			-s|--signoff)
				signoff=1
				;;
			-S|--no-signoff)
				signoff=
				;;
			-*)
				print_usage >&2
				exit 1
				;;
			*)
				if [[ -n ${pr} ]]; then
					echo "${0}: only a single PR/patch can be specified" >&2
					print_usage >&2
					exit 1
				fi
				pr=${1}
				;;
		esac

		shift
	done

	if [[ -z ${pr} ]]; then
		print_usage >&2
		exit 1
	fi

	if [[ $(git rev-parse --is-inside-work-tree) != true ]]; then
		echo "pram needs to be run inside the git checkout!" >&2
		exit 1
	fi

	if [[ ${gitconfig} ]]; then
		local opt

		# string options
		[[ -z ${repo} ]] && repo=$(git config --get pram.repo)
		[[ -z ${editor} ]] && editor=$(git config --get pram.editor)

		# boolean options
		if [[ ${signoff} == def ]]; then
			opt=$(git config --type bool --get pram.signoff)
			[[ ${opt} == true ]] && signoff=1
			[[ ${opt} == false ]] && signoff=
		fi
		if [[ ${interactive} == def ]]; then
			opt=$(git config --type bool --get pram.interactive)
			[[ ${opt} == true ]] && interactive=1
			[[ ${opt} == false ]] && interactive=
		fi
		if [[ ${gpgsign} == def ]]; then
			opt=$(git config --type bool --get pram.gpgsign)
			[[ ${opt} == true ]] && gpgsign=1
			[[ ${opt} == false ]] && gpgsign=
		fi
	fi

	# set defaults
	: "${repo:=gentoo/gentoo}"
	: "${editor:=${EDITOR:-vim}}"

	tempdir=$(mktemp -d) || die "Unable to create a temporary directory"
	trap 'rm -r -f "${tempdir}"' EXIT

	local to_close
	case ${pr} in
		*://github.com/*/*/pull/*)
			# GitHub URL
			to_close=${pr%.patch}
			pr=${to_close}.patch
			;;
		*://*.bugs.gentoo.org/attachment.cgi?*)
			# Gentoo Bugzilla attachment
			# (get bug no from domain name)
			to_close=${pr%%.bugs*}
			to_close="https://bugs.gentoo.org/${to_close#*://}"
			;;
		*://*)
			# arbitrary URL
			to_close=
			;;
		[0-9]*)
			# a number?
			to_close="https://github.com/${repo}/pull/${pr}"
			pr=${to_close}.patch
			;;
		*)
			# a local file maybe?
			to_close=
			[[ -f ${pr} ]] ||
				die "Parameter neither an URL, number or file: ${pr}"
			cp "${pr}" "${tempdir}"/all.patch || die "Copying patch failed"
			pr=
			;;
	esac
	if [[ -n ${pr} ]]; then
		wget -O "${tempdir}/all.patch" "${pr}" || die "Fetching patch failed"
	fi
	git mailsplit --keep-cr -o"${tempdir}" "${tempdir}/all.patch" >/dev/null ||
		die "Splitting patches failed"

	local patches=( "${tempdir}"/[0-9]* )
	if [[ ${signoff} ]]; then
		local f
		for f in "${patches}"; do
			if ! grep -q '^Signed-off-by:' "${f}"; then
				die "Commit no. ${f##*/} was not signed off by the author!"
			fi
		done
	fi

	# append bug references
	local b
	for b in "${bug[@]}"; do
		[[ ${b} != *://* ]] && b=https://bugs.gentoo.org/${b}
		add_trailer "${patches[-1]}" "Bug: ${b}"
	done
	for b in "${closes[@]}"; do
		[[ ${b} != *://* ]] && b=https://bugs.gentoo.org/${b}
		add_trailer "${patches[-1]}" "Closes: ${b}"
	done
	# append Closes: to the final commit if missing
	if [[ -n ${to_close} ]]; then
		if ! grep -q "^Closes: ${to_close}" "${patches[-1]}"; then
			add_trailer "${patches[-1]}" "Closes: ${to_close}"
		fi
	fi

	# concatenate the patches back
	cat "${patches[@]}" > "${tempdir}/all.patch" ||
		die "Concatenating patches failed"
	rm "${patches[@]}" || die "Split patch cleanup failed"

	${editor} "${tempdir}/all.patch" || die "Starting editor failed"

	if [[ ! -s ${tempdir}/all.patch ]]; then
		echo "Patch is empty now, nothing to do." >&2
		return 0
	fi

	if [[ ${interactive} ]]; then
		while :; do
			local answer
			read -p "Do you want to merge this? (Y/n/q) " answer
			case ${answer,,} in
				y|"")
					break
					;;
				q|n)
					return 0
					;;
				*)
					echo "Unknown answer."
					;;
			esac
		done
	fi
	git am --keep-cr -3 ${signoff:+-s} ${gpgsign:+-S} "${am_options[@]}" \
			"${tempdir}/all.patch" || die "git am failed"
}

main "${@}"
